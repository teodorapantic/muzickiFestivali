// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace PROJEKAT_WEB.Migrations
{
    [DbContext(typeof(MuzickiFestivaliContext))]
    [Migration("20220321181956_V2")]
    partial class V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.DanFest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<float>("CenaZaDan")
                        .HasColumnType("real");

                    b.Property<string>("Dan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FestivalID")
                        .HasColumnType("int");

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FestivalID");

                    b.ToTable("DaniFesta");
                });

            modelBuilder.Entity("Models.Festival", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("DatumKraja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("opisFestivala")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Festivali");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DanID")
                        .HasColumnType("int");

                    b.Property<int?>("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("Ulaznica")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DanID");

                    b.HasIndex("RezervacijaID");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("Models.Nastup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DanID")
                        .HasColumnType("int");

                    b.Property<string>("ImeIzvodjaca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("vreme")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DanID");

                    b.ToTable("Nastupi");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int?>("FestivalID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("UkupnaCena")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("FestivalID");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("Models.DanFest", b =>
                {
                    b.HasOne("Models.Festival", "Festival")
                        .WithMany("Dani")
                        .HasForeignKey("FestivalID");

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.HasOne("Models.DanFest", "Dan")
                        .WithMany("Karte")
                        .HasForeignKey("DanID");

                    b.HasOne("Models.Rezervacija", "Rezervacija")
                        .WithMany("Karte")
                        .HasForeignKey("RezervacijaID");

                    b.Navigation("Dan");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Models.Nastup", b =>
                {
                    b.HasOne("Models.DanFest", "Dan")
                        .WithMany("Nastup")
                        .HasForeignKey("DanID");

                    b.Navigation("Dan");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.HasOne("Models.Festival", "Festival")
                        .WithMany("Rezervacija")
                        .HasForeignKey("FestivalID");

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("Models.DanFest", b =>
                {
                    b.Navigation("Karte");

                    b.Navigation("Nastup");
                });

            modelBuilder.Entity("Models.Festival", b =>
                {
                    b.Navigation("Dani");

                    b.Navigation("Rezervacija");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.Navigation("Karte");
                });
#pragma warning restore 612, 618
        }
    }
}
